package com.example.myapplication;import android.Manifest;import android.content.pm.PackageManager;import android.graphics.Color;import android.os.Bundle;import android.os.Handler;import android.os.StrictMode;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import com.example.myapplication.R;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.ServerSocket;import java.net.Socket;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.text.SimpleDateFormat;import java.util.Date;public class server extends AppCompatActivity implements View.OnClickListener {    private ServerSocket serverSocket;    private Socket tempClientSocket;    Thread serverThread = null;    public static final int SERVER_PORT = 3003;    private LinearLayout msgList;    private Handler handler;    private int greenColor;    private EditText edMessage;    private static String ip = "eu-cdbr-west-01.cleardb.com";    private static String port = "3306";    private static String Classes = "net.sourceforge.jtds.jdbc.Driver";    private static String database = "heroku_42b88a2c1536c29";    private static String username = "bd1e6c3b5f3d3a";    private static String password = "61e5ad9e";    private static String url = "jdbc:jtds:sqlserver://"+ip+":"+port+"/"+database;    Statement statement ;    Connection connection = null ;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_server);        setTitle("Server");        handler = new Handler();        msgList = findViewById(R.id.msgList);        edMessage = findViewById(R.id.edMessage);        ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();        StrictMode.setThreadPolicy(policy);        try {            Class.forName("com.mysql.jdbc.Driver");            Connection connection = DriverManager.getConnection("jdbc:mysql://eu-cdbr-west-01.cleardb.com:3306/heroku_42b88a2c1536c29", "bd1e6c3b5f3d3a", "61e5ad9e");            statement = connection.createStatement();        } catch (SQLException | ClassNotFoundException e) {            e.printStackTrace();        }    }    public TextView textView(String message, int color) {        if (null == message || message.trim().isEmpty()) {            message = "<Empty Message>";        }        TextView tv = new TextView(this);        System.out.println(message);        tv.setTextColor(color);        tv.setText(message + " [" + getTime() +"]");        tv.setTextSize(20);        tv.setPadding(0, 5, 0, 0);        return tv;    }    public void showMessage(final String message, final int color) {        handler.post(new Runnable() {            @Override            public void run() {                msgList.addView(textView(message, Color.WHITE));            }        });    }    @Override    public void onClick(View view) {        if (view.getId() == R.id.start_server) {            msgList.removeAllViews();            showMessage("Server Started.", Color.BLACK);            this.serverThread = new Thread(new ServerThread());            this.serverThread.start();            return;        }        if (view.getId() == R.id.send_data) {            String msg = edMessage.getText().toString().trim();            showMessage("Server : " + msg, Color.BLUE);            sendMessage(msg);        }    }    private void sendMessage(final String message) {        try {            if (null != tempClientSocket) {                new Thread(new Runnable() {                    @Override                    public void run() {                        PrintWriter out = null;                        try {                            out = new PrintWriter(new BufferedWriter(                                    new OutputStreamWriter(tempClientSocket.getOutputStream())),                                    true);                        } catch (IOException e) {                            e.printStackTrace();                        }                        out.println(message);                    }                }).start();            }        } catch (Exception e) {            e.printStackTrace();        }    }    class ServerThread implements Runnable {        public void run() {            Socket socket;            try {                serverSocket = new ServerSocket(SERVER_PORT);            } catch (IOException e) {                e.printStackTrace();                showMessage("Error Starting Server : " + e.getMessage(), Color.RED);            }            if (null != serverSocket) {                while (!Thread.currentThread().isInterrupted()) {                    try {                        socket = serverSocket.accept();                        CommunicationThread commThread = new CommunicationThread(socket);                        new Thread(commThread).start();                    } catch (IOException e) {                        e.printStackTrace();                        showMessage("Error Communicating to Client :" + e.getMessage(), Color.RED);                    }                }            }        }    }    class CommunicationThread implements Runnable {        private Socket clientSocket;        private BufferedReader input;        String requete ;        public CommunicationThread(Socket clientSocket) {            this.clientSocket = clientSocket;            tempClientSocket = clientSocket;            try {                this.input = new BufferedReader(new InputStreamReader(this.clientSocket.getInputStream()));                requete = this.input.readLine();            } catch (IOException e) {                e.printStackTrace();                showMessage("Error Connecting to Client!!", Color.RED);            }            showMessage("Connected to Client!!", greenColor);        }        public void run() {            while (!Thread.currentThread().isInterrupted()) {                try {                    String read = input.readLine();                    if (null == read || "Disconnect".contentEquals(read)) {                        Thread.interrupted();                        read = "Client Disconnected";                        showMessage("Client : " + read, greenColor);                        break;                    }else {                        System.out.println("reead" + read);                        showMessage("Client : " + read, greenColor);                        String s  = "" ;                        try {                            ResultSet resultSet =  statement.executeQuery(requete);                            while (resultSet.next()) {                                s+= resultSet.getString(1);                            }                        } catch (SQLException throwables) {                            throwables.printStackTrace();                        }                        sendMessage(s);                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    String getTime() {        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");        return sdf.format(new Date());    }    @Override    protected void onDestroy() {        super.onDestroy();        if (null != serverThread) {            sendMessage("Disconnect");            serverThread.interrupt();            serverThread = null;        }    }}